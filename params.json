{"name":"IO Benchmark","tagline":"Comparison of IO methods for Linux and OS X.","body":"# Introduction\r\n\r\nThis repository contains a comprehensive set of IO benchmarks for Linux and OS\r\nX. These benchmarks are intended to determine the fastest ways to perform the\r\nfollowing IO operations on each target platform:\r\n\r\n  - Sequentially reading a file.\r\n  - Sequentially overwriting a preallocated file.\r\n  - Replacing the contents of an existing file with those of another file.\r\n\r\n# Prerequisites\r\n\r\n- Linux (version 2.6.33 or newer) or OS X.\r\n- A C++11-conformant compiler that accepts flags in GCC's format (e.g. `g++` or\r\n`clang++`).\r\n- Boost.\r\n- Ruby.\r\n- Rake.\r\n\r\n# Compilation\r\n\r\nBefore compiling the benchmarks, you will need to set two environment variables.\r\n\r\n  - Set `CXX` to your desired C++11-conformant compiler.\r\n  - Set `BOOST_INCLUDE_PATH` to the path containing the Boost header files.\r\n\r\nAfterwards, you can compile the benchmarks by running `rake`.\r\n\r\n# Usage\r\n\r\nThe `tools` directory contains a set of scripts that you will need to run the\r\nbenchmarks. In order to run these scripts, you will need to type `chmod +x\r\ntools/*`.\r\n\r\n  - The `tools/make_data.rb` script uses `dd` to create a set of files in the\r\n  `data` directory. These files are used to perform the benchmarks.\r\n  - The `tools/test_read.sh` and `tools/test_write.sh` scripts perform the\r\n  reading and writing benchmarks, respectively.\r\n  - The read benchmark **must** be run as root! This is because the benchmark\r\n  repeatedly drops the page cache to obtain accurate results. Do **not** run\r\n  this benchmark on a server that is doing anything important!\r\n  - I did not create a script to run the copy benchmark. Based on existing\r\n  results, it is clear that the fastest way to copy a file on OS X is\r\n  `copy_mmap`, and `splice_preallocate_fadvise` or\r\n  `sendfile_preallocate_fadvise` on Linux.\r\n\r\nIn both `test_read.sh` and `test_write.sh`, you will see the following lines:\r\n\r\n\t#sizes=(8 16 24 32 40 48 56 64 80 96 112 128 160 192 224 256 320 384 448 512 640 768 896 1024)\r\n\tsizes=(8 16 32 64 80 96 112 256) #512 1024)\r\n\r\nThese lines declare the sizes of the files (in megabytes) that are used for the\r\nbenchmarks. By default, only a small set of files ranging in size from 8 MB to\r\n256 MB are used. The first line in the pair refers to the full set of files\r\nproduced by `tools/make_data.rb`. Even on a machine with a fast PCIe SSD, the\r\nread benchmark did not finish overnight. So only uncomment this line if you know\r\nthat you will be able to leave the benchmark running for a long time (half a day\r\nto several days, depending on the speed of your hard drive).\r\n\r\nThe results of the benchmarks are saved in the `results` directory. This\r\ndirectory already contains results generated from a couple of systems.\r\n\r\n# License\r\n\r\n[![Creative Commons Attribution 4.0 International\r\nLicense][license_image]][license_page]\r\n\r\nThis project is released under the [Creative Commons Attribution 4.0\r\nInternational License][license_page].\r\n\r\n[license_page]:\r\nhttp://creativecommons.org/licenses/by/4.0/\r\n\r\n[license_image]:\r\nhttp://i.creativecommons.org/l/by/4.0/88x31.png\r\n\r\n# References\r\n\r\n- The manual pages for [OS X][darwin_man] and [Linux][linux_man].\r\n- A very useful [benchmark][write_patterns] on write patterns.\r\n- The [blog post][plenz_blog_post] by the same author.\r\n- A Mozilla [blog post][moz_blog_post] about `F_PREALLOCATE` on OS X.\r\n\r\n[darwin_man]:\r\nhttps://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/\r\n\"Mac OS X Manual Pages\"\r\n\r\n[linux_man]:\r\nhttp://linux.die.net/man/\r\n\"Linux Manual Pages\"\r\n\r\n[write_patterns]:\r\nhttps://github.com/Feh/write-patterns\r\n\"Write Patterns\"\r\n\r\n[plenz_blog_post]:\r\nhttp://blog.plenz.com/2014-04/so-you-want-to-write-to-a-file-real-fast.html\r\n\"Write Patterns Blog Post\"\r\n\r\n[moz_blog_post]:\r\nhttps://blog.mozilla.org/tglek/2010/09/09/help-wanted-does-fcntlf_preallocate-work-as-advertised-on-osx/\r\n\"F_PREALLOCATE Blog Post\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}